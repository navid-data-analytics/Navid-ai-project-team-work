# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import conference_reports_service_pb2 as conference__reports__service__pb2


class ConferenceReportsServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ListAvailableFilters = channel.unary_unary(
        '/ConferenceReportsService/ListAvailableFilters',
        request_serializer=conference__reports__service__pb2.ListAvailableFiltersRequest.SerializeToString,
        response_deserializer=conference__reports__service__pb2.ListAvailableFiltersResponse.FromString,
        )
    self.ListConferences = channel.unary_unary(
        '/ConferenceReportsService/ListConferences',
        request_serializer=conference__reports__service__pb2.ListConferencesRequest.SerializeToString,
        response_deserializer=conference__reports__service__pb2.ListConferencesResponse.FromString,
        )
    self.ListFilterValues = channel.unary_unary(
        '/ConferenceReportsService/ListFilterValues',
        request_serializer=conference__reports__service__pb2.ListFilterValuesRequest.SerializeToString,
        response_deserializer=conference__reports__service__pb2.ListFilterValuesResponse.FromString,
        )
    self.Aggregate = channel.unary_unary(
        '/ConferenceReportsService/Aggregate',
        request_serializer=conference__reports__service__pb2.AggregateRequest.SerializeToString,
        response_deserializer=conference__reports__service__pb2.AggregateResponse.FromString,
        )
    self.AggregateTimeSeries = channel.unary_unary(
        '/ConferenceReportsService/AggregateTimeSeries',
        request_serializer=conference__reports__service__pb2.AggregateTimeSeriesRequest.SerializeToString,
        response_deserializer=conference__reports__service__pb2.AggregateTimeSeriesResponse.FromString,
        )
    self.Metrics = channel.unary_unary(
        '/ConferenceReportsService/Metrics',
        request_serializer=conference__reports__service__pb2.MetricsRequest.SerializeToString,
        response_deserializer=conference__reports__service__pb2.MetricsResponse.FromString,
        )


class ConferenceReportsServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ListAvailableFilters(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListConferences(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListFilterValues(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Aggregate(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AggregateTimeSeries(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Metrics(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ConferenceReportsServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ListAvailableFilters': grpc.unary_unary_rpc_method_handler(
          servicer.ListAvailableFilters,
          request_deserializer=conference__reports__service__pb2.ListAvailableFiltersRequest.FromString,
          response_serializer=conference__reports__service__pb2.ListAvailableFiltersResponse.SerializeToString,
      ),
      'ListConferences': grpc.unary_unary_rpc_method_handler(
          servicer.ListConferences,
          request_deserializer=conference__reports__service__pb2.ListConferencesRequest.FromString,
          response_serializer=conference__reports__service__pb2.ListConferencesResponse.SerializeToString,
      ),
      'ListFilterValues': grpc.unary_unary_rpc_method_handler(
          servicer.ListFilterValues,
          request_deserializer=conference__reports__service__pb2.ListFilterValuesRequest.FromString,
          response_serializer=conference__reports__service__pb2.ListFilterValuesResponse.SerializeToString,
      ),
      'Aggregate': grpc.unary_unary_rpc_method_handler(
          servicer.Aggregate,
          request_deserializer=conference__reports__service__pb2.AggregateRequest.FromString,
          response_serializer=conference__reports__service__pb2.AggregateResponse.SerializeToString,
      ),
      'AggregateTimeSeries': grpc.unary_unary_rpc_method_handler(
          servicer.AggregateTimeSeries,
          request_deserializer=conference__reports__service__pb2.AggregateTimeSeriesRequest.FromString,
          response_serializer=conference__reports__service__pb2.AggregateTimeSeriesResponse.SerializeToString,
      ),
      'Metrics': grpc.unary_unary_rpc_method_handler(
          servicer.Metrics,
          request_deserializer=conference__reports__service__pb2.MetricsRequest.FromString,
          response_serializer=conference__reports__service__pb2.MetricsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ConferenceReportsService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
